{"parentSha1":"75df80b93928fc4dc6a1a61ed6d6c66766fdfcdb","path":"books/Category Theory For Programmers/8. Functoriality/2","kids":[],"item":{"attr":{"a":"```haskell\n-- Equational reasoning between Maybe' and Maybe is trivial. It writes itself.\ntype Maybe' a = Either (Const () a) (Identity a)\nmaybeFrom :: Maybe' a -> Maybe a\nmaybeFrom (Left _) = Nothing\nmaybeFrom (Right (Identity a)) = Just a\n\nmaybeTo :: Maybe a -> Maybe' a\nmaybeTo Nothing = Left (Const ())\nmaybeTo (Just a) = Right (Identity a)\n```","q":"Show the isomorphism between the standard definition of Maybe and this desugaring:\n```haskell\ntype Maybe' a = Either (Const () a) (Identity a)\n```\nHint: Define two mappings between the two implementations. For additional credit, show that they are the inverse of each other using equational reasoning."},"sha1":"e187d14871666eac448876f486af7d6b6e16f00f","title":"2"}}