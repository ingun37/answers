{"path":"books/Category Theory For Programmers/10. Natural Transformations","kids":[{"attr":{"a":"```haskell\nimport Data.Functor.Contravariant\n\nop :: Op Bool Int\nop = Op (\\x -> x > 0)\n\n\ntc1 :: Op Bool a -> Op Float a\ntc1 (Op f) = Op (\\x -> if f x then 1 else 0)\n\ntest :: (Op Float String) -> Float\ntest (Op f) = f \"5\"\n\ntc1out1 :: IO ()\ntc1out1 = do\n    let o1 = (contramap read . tc1) op\n    let o2 = (tc1 . contramap read) op\n    print (test o1 == test o2)\n```","q":"Create a few test cases for the opposite naturality condition of transformations between different `Op` functors. Hereâs one choice:\n```haskell\nop :: Op Bool Int\nop = Op (\\x -> x > 0)\n```\nand\n```haskell\nf :: String -> Int\nf x = read x\n```"},"sha1":"2f12df7b90913cc59b762e5701fdb367b80af408","title":"6"},{"attr":{"a":"```haskell\ndata Reader a b = Reader (a -> b)\nnt1 :: Reader () a -> [a]\nnt1 (Reader f) = [f ()]\nnt2 :: Reader () a -> [a]\nnt2 _ = []\nnt3 :: Reader () a -> [a]\nnt3 (Reader f) = f () : nt3 (Reader f)\n```","q":"Define at least two different natural transformations between `Reader ()` and the list functor. How many different lists of `()` are there?"},"sha1":"3cbce41fcf87fb3191838fd32e339e593e49168f","title":"2"},{"attr":{"a":"```haskell\ndata Reader a b = Reader (a -> b)\n\nrb1 :: Reader Bool a -> [a]\nrb1 (Reader f) = [f True]\nrb2 :: Reader Bool a -> [a]\nrb2 _ = []\nrb3 :: Reader Bool a -> [a]\nrb3 (Reader f) = f False : rb3 (Reader f)\n\nm1 :: Maybe a -> [a]\nm1 (Just a) = [a]\nm1 Nothing = []\nm2 :: Maybe a -> [a]\nm2 _ = []\nm3 :: Maybe a -> [a]\nm3 (Just a) = a : m3 (Just a)\nm3 Nothing = []\n```","q":"Continue the previous exercise with `Reader Bool` and `Maybe`."},"sha1":"6f4bc7720d2ccb63ddabcae8c2944ffcc323ff01","title":"3"},{"attr":{"a":"Let's proove interchange law.\n\n\n$\\left( \\beta '\\cdot \\alpha '\\right) \\circ \\left( \\beta \\cdot \\alpha \\right) =\\left( \\beta '\\circ \\beta \\right) \\cdot \\left( \\alpha '\\circ \\alpha \\right)$\n\n\nLet's say each natural transformation is defined as\n\n\n$\\alpha :F\\rightarrow F_{2}$\n$\\alpha ':F_{2}\\rightarrow F_{3}$\n$\\beta :G\\rightarrow G_{2}$\n$\\beta ':G_{2}\\rightarrow G_{3}$\n\n\n![](assets/img/nat.JPG)\n\nLet's see what we get with first one.\n\n$\\left( \\beta '\\cdot \\alpha '\\right) \\circ \\left( \\beta \\cdot \\alpha \\right)GF$ \n\nUsing horizontal composition\n$=\\left( \\beta'\\cdot \\alpha '\\right) G_{2}F_{2}$\nAgain, using horizontal composition\n$=G_{3}F_{3}$\n\nNow the second one.\n\n$\\left( \\beta '\\circ \\beta \\right) \\cdot \\left( \\alpha '\\circ \\alpha \\right)GF$\n\nUnlike previous one, we cannot directly apply the $(\\alpha' \\circ \\alpha)$ to $GF$. No problem. We can composite horizontally with $id:G\\rightarrow G$\n\n$=\\left( \\beta '\\circ \\beta\\right) \\cdot \\left( \\left( id\\cdot \\alpha '\\right) \\circ \\left( id\\cdot \\alpha \\right) \\right)GF$\n$=\\left( \\beta'\\circ \\beta\\right)GF_3$\n\nSame way but this time with $id:F\\rightarrow F$\n\n$=\\left( \\left( \\beta'\\cdot id\\right) \\circ \\left( \\beta \\cdot id\\right) \\right) GF_{3}$\n$=G_3 F_3$\n\n\nProooven BAMMM","q":"Write a short essay about how you may enjoy writing down the evident diagrams needed to prove the interchange law.\n"},"sha1":"ebe52014d6aaf02a4ddeaa7de59a014eac6634b8","title":"5"},{"attr":{"a":"![](assets/img/h.jpeg)\n\ncommuting square 1 | commuting square 2\n---                | ---\n![](assets/img/h0.jpeg)     | ![](assets/img/h1.jpeg) ","q":"Show that horizontal composition of natural transformation satisfies the naturality condition (hint: use components). Itâs a good exercise in diagram chasing."},"sha1":"79c4cb5fa62b85792e95b059cb7c1b0d4800ad48","title":"4"},{"attr":{"a":"```haskell\nnt :: Maybe a -> [a]\nnt Nothing = []\nnt (Just a) = [a]\n-- fmap f (nt Nothing) = fmap f [] = []\n-- fmap f (nt Just a) = fmap f [a] = [b]\n-- nt fmap f Nothing = nt Nothing = []\n-- nt fmap f (Just a) = nt (Just b) = [b]\n```","q":"Define a natural transformation from the `Maybe` functor to the list functor. Prove the naturality condition for it.\n"},"sha1":"f1b678c49ff593df8da637cc39861d84c1e75b26","title":"1"}],"item":{"attr":{},"sha1":"54c6ff9a213b80284619a5afb7859d9d30a444bc","title":"10. Natural Transformations"}}