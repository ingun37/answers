{"parentSha1":"b2a3b650e20b0d34511030969274674aaf259e55","path":"books/Category Theory For Programmers/24. F-Algebras/3","item":{"title":"3","attr":{"q":"Implement the algebra for the ring of 2x2 matrices.","a":"I choosed `Rational` as type of element of Matrix because matrix is over field and rational numbers is field.\n```haskell\nmodule Lib\n    ( alg, RingF(..), matalg\n    ) where\nimport Data.Fix\nimport Data.Matrix\n\ndata RingF a = RZero\n             | ROne\n             | RAdd a a \n             | RMul a a\n             | RNeg a\n\ninstance Functor RingF where\n    fmap f r = case r of\n        RZero -> RZero\n        ROne -> ROne\n        RAdd a b -> RAdd (f a) (f b)\n        RMul a b -> RMul (f a) (f b)\n        RNeg a -> RNeg (f a)\n\ntype Ring = Fix RingF\n\ntype Mat = Matrix Rational\nmatalg :: RingF Mat -> Mat\nmatalg RZero = zero 2 2 \nmatalg ROne = identity 2 \nmatalg (RNeg x) = fmap negate x \nmatalg (RAdd x y) = elementwise (+) x y \nmatalg (RMul x y) = multStd x y \n```\n## Test\n\n```haskell\nmain :: IO ()\nmain = do\n    print $ cata matalg $ Fix (RAdd (Fix ROne) (Fix ROne))\n```\n\n## Result\n\n```shell\ningun$ stack test\n...\n 2 % 1 0 % 1\n 0 % 1 2 % 1\n```"},"sha1":"0d15a1d6317b8c7d64b3e919a61a839a97307e7b"},"kids":[]}