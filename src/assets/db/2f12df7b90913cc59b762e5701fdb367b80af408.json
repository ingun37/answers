{"path":"books/Category Theory For Programmers/10. Natural Transformations/6","kids":[],"item":{"attr":{"a":"```haskell\nimport Data.Functor.Contravariant\n\nop :: Op Bool Int\nop = Op (\\x -> x > 0)\n\n\ntc1 :: Op Bool a -> Op Float a\ntc1 (Op f) = Op (\\x -> if f x then 1 else 0)\n\ntest :: (Op Float String) -> Float\ntest (Op f) = f \"5\"\n\ntc1out1 :: IO ()\ntc1out1 = do\n    let o1 = (contramap read . tc1) op\n    let o2 = (tc1 . contramap read) op\n    print (test o1 == test o2)\n```","q":"Create a few test cases for the opposite naturality condition of transformations between different `Op` functors. Hereâ€™s one choice:\n```haskell\nop :: Op Bool Int\nop = Op (\\x -> x > 0)\n```\nand\n```haskell\nf :: String -> Int\nf x = read x\n```"},"sha1":"2f12df7b90913cc59b762e5701fdb367b80af408","title":"6"}}