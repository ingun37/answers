{"parentSha1":"6ed65dadd1a6039b895159d69c1c0d8be2959671","path":"answers-db/books/Neural Networks and Deep Learning/2. How the backpropagation algorithm works/The four fundamental equations behind backpropagation/Alternate presentation of the equations of backpropagation/2","item":{"title":"2","attr":{"q":"<p>Show that (BP2) may be rewritten as</p>\n<p><span class=\"math display\">\\delta^l = \\Sigma&#39;(z^l) (w^{l+1})^T \\delta^{l+1} \\tag{34}</span></p>","a":"<p>Just like the previous question, we can either prove it by using properties of diagonal matrices or applying one more chian rule to the answer of previous question. I'll go with latter one again.</p>\n<p>Let <span class=\"math inline\">T</span> be the function of multiplying and adding weights and biases.</p>\n<p><span class=\"math display\">T(a) = Wa + B</span></p>\n<p>Then we can define <span class=\"math inline\">z_{l+1}</span> in terms of <span class=\"math inline\">z_l</span>.</p>\n<p><span class=\"math display\">z_{l+1} = T \\circ \\sigma (z_l)</span></p>\n<p>Jacobian of <span class=\"math inline\">T \\circ \\sigma</span> is (chain rule)</p>\n<p><span class=\"math display\">J_{T \\sigma} = J_T (a_l) J_\\sigma (z_l)</span></p>\n<p>where <span class=\"math inline\">J_\\sigma (z_l)</span> is <span class=\"math inline\">\\Sigma &#39; (z_l)</span> (proven in the previous problem) and <span class=\"math inline\">J_T (a_l) = W</span> (because of linearity). Therefore we can simplify like this</p>\n<p><span class=\"math display\">= W \\Sigma &#39; (z_l)</span></p>\n<p>We are already given the gradient of <span class=\"math inline\">C</span> in terms of <span class=\"math inline\">z_{l+1}</span> which is <span class=\"math inline\">\\delta_{l+1}</span>, therefore</p>\n<p><span class=\"math display\">\\begin{aligned}\n    \\delta_l &amp;= \\left( W \\Sigma &#39; (z_l) \\right)^\\intercal \\delta_{l+1} \\\\\n             &amp;= W^\\intercal \\Sigma &#39; (z_l)^\\intercal \\delta_{l+1} \\\\\n\\end{aligned}</span></p>\n<p>Since <span class=\"math inline\">\\Sigma &#39; (z_l)</span> is diagonal we can remove the transpose and move it to the end and turn into Hadamard product.</p>\n<p><span class=\"math display\">= W^\\intercal \\delta_{l+1} \\odot \\sigma &#39; (z_l)</span></p>"},"sha1":"600d0c672155d4021896a9f2ac1e685dc5ad0b5f"},"kids":[]}