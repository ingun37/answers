{"parentSha1":"75df80b93928fc4dc6a1a61ed6d6c66766fdfcdb","path":"books/Category Theory For Programmers/8. Functoriality/3","kids":[],"item":{"attr":{"a":"It is a sum type of `Nil` and `Cons a b`. `Cons a b` is no different to `Pair a b` which we just proved to be a bifunctor. So it’s algebraic type on a bifunctor hence bifunctor.","q":"Let’s try another data structure. I call it a `PreList` because it’s a precursor to a `List`. It replaces recursion with a type parameter `b`.\n```haskell\ndata PreList a b = Nil | Cons a b\n```\nYou could recover our earlier definition of a `List` by recursively applying `PreList` to itself (we’ll see how it’s done when we talk about fixed points).\nShow that `PreList` is an instance of Bifunctor."},"sha1":"9309898cdbffb21cdf2c2a8faad51d01839948c5","title":"3"}}