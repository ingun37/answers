{"parentSha1":"54c6ff9a213b80284619a5afb7859d9d30a444bc","path":"books/Category Theory For Programmers/10. Natural Transformations/1","kids":[],"item":{"attr":{"a":"```haskell\nnt :: Maybe a -> [a]\nnt Nothing = []\nnt (Just a) = [a]\n-- fmap f (nt Nothing) = fmap f [] = []\n-- fmap f (nt Just a) = fmap f [a] = [b]\n-- nt fmap f Nothing = nt Nothing = []\n-- nt fmap f (Just a) = nt (Just b) = [b]\n```","q":"Define a natural transformation from the `Maybe` functor to the list functor. Prove the naturality condition for it.\n"},"sha1":"f1b678c49ff593df8da637cc39861d84c1e75b26","title":"1"}}