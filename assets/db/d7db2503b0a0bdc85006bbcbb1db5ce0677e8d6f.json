{"parentSha1":"b2a3b650e20b0d34511030969274674aaf259e55","path":"books/Category Theory For Programmers/24. F-Algebras/4","item":{"title":"4","attr":{"q":"Define a coalgebra whose anamorphism produces a list of squares of natural numbers.","a":"```haskell\nmodule Rib\n    ( coalg, toListC\n    ) where\nimport Data.Fix\nimport Data.Matrix\n\ndata StreamF a = StreamF Int a\n\ninstance Functor StreamF where\n    fmap f (StreamF n x) = StreamF n (f x)\n\ntype Stream = Fix StreamF\n\ncoalg :: Int -> StreamF Int\ncoalg n = StreamF (n*n) (n+1)\n\ntoListC :: Fix StreamF -> [Int]\ntoListC = cata al where al :: StreamF [Int] -> [Int]\n                        al (StreamF n arr) = n : arr\n```\n## Test\n```haskell\nimport Rib\nimport Data.Fix\n\nmain :: IO ()\nmain = do\n    print $ take 5 $ toListC $ ana coalg 1\n```\n## Result\n```shell\ningun$ stack test\n...\n[1,4,9,16,25]\n```"},"sha1":"d7db2503b0a0bdc85006bbcbb1db5ce0677e8d6f"},"kids":[]}